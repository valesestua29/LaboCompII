/* ------- FUNCIONES ----------- */

Se trbaja en la zona de pial
    Almacena las variables locales de las funciones asi como tambien
    los registros de activacion 

Parametros -->  Funcion  --> Valor

Declaracion de funciones:

    Funciones con retorno de valor 
        Tipo_de_dato Nombre_de_la_funcion (parametros){



            return valor;
        }

    Funciones sin retorno de valor
        void Nombre_de_la_funcion (parametros){



        }

Es importante usar prototipos de funciones
    Antes de la funcion main() voy a agregar el prototipo de la funcion 

PASAJE DE PARAMETROS ------

    Pasaje por valor

        int main(){
            int a,b;
            a=5;
            b=1;
            suma(a,b);

            return 0;
        }

        void suma(int c, int d){
            int result;         //variable local de la funcion
            result= c+d;
            printf.... 
        }

    Pasaje por direccion 

        int main(){
            int a,b;
            a=5;
            b=1;
            suma(&a,&b);        //le paso las direcciones de las variables 

            return 0;
        }

        void suma(int *c, int *d){  //declaro variables del tipo punteros
            int result;
            result= *c + *d;    //accede a los datos almacenados en las direcciones
            printf.... 
        }

    Ventajas de pasar por direccion: 
        modificar multiples valores: Si una funcion necesita modificar mas de un valor y se desea visualizar los cambios fuera de la funcion 

        eficiencia: pasar grandes estructuras de datos o matrices por valor puede ser ineficiente en terminos de memoria y tiempo de ejecucion.
            Pasarlos por direccion puede evitar la copia de grandes cantidades de datos 

        funciones de retorno multiple: cuando una funcion necesita devolver mas de un valor, se pueden pasar punteros a las variables fuera de la 
            funcion para que puedan ser modificadas




Numeros Pseudoaleatorios

    Los numeros pseudoaleatorios se generan de manera secuencial con un algoritmo determinado, 
    formalmente se definen por:
        -Funcion de inicializacion. Recibe un numero y pone al fenerador en su estado inicializacion
        -Funcion de transicion. Transforma el estado del generador
        -Funcion de salida. Transforma el estado para producir un numero fijo de bits
    
    rand() , <stdlib.h>

    Los numeros generaados por rand () se denominan pseudoaleatorios ya que no son verdaderamente aleatorios
    sino que siguen una secuencia tan grande que podemos ignorarla

    Funciona recordando un valor denominado semilla o seed al cual le sucede otro y a ese otro y siempre es la
    misma secuencia

    #include <stdlib.h>
    numero = rand()%11;
    numero = rand()%(N+1);

    La operacion modulo (%) nos da el resto de dividir rand() entre 11. Este resto puede ir de 0 a 10.
    de la misma forma, el modulo de rand() entre N+1 va de 0 a Nombre_de_la_funcion

    numero = () % (maximo - minimo + 1) + minimo ;   // numeros entre minimo y maximo

    Como funciona:
        Parte de un numero inicial y obtenemos un numero que nos parece aleaotorio, pero el segundo numero que 
        obtiene siempre es el que sigue al anterior y asi sucesivamente

        Si volvemos a ejecutar el programa desde el principio, el numero inicial que usa rand() es el mismo con lo 
        que la secuencia de numeros aleatorios es la misma, ya que la secuencia es la misma. 